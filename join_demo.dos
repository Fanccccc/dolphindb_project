db = database("dfs://svmDemo")
schema = table(1:0, `tagId`machineId`tagName`organization`description, [INT,INT,SYMBOL,SYMBOL,SYMBOL])
dt = db.createTable(schema,`tagInfo)

tagInfo=loadTable("dfs://svmDemo","tagInfo")
t = table(1 2 51 52 as tagId,1 1 2 2 as machineId,`speed`temperature`speed`temperature as tagName,`hangzhou`hangzhou`shanghai`shanghai as organization,
  "Speed/No.1 Wind Turbine in Hangzhou" "Temperature/No.1 Wind Turbine in Hangzhou" "Speed/No.2 Wind Turbine in Shanghai" "Temperature/No.2 Wind Turbine in Shanghai" as description )
tagInfo.append!(t)

// ***** equal join ***** //
// sensors 与 tagInfo 进行 equal join(ej) 关联查询
// ej(leftTable, rightTable, matchingCols, [rightMatchingCols]) 
// leftTable 和 rightTable 是连接的表, matchingCols 是表示连接列的字符串标量或向量
// rightMatchingCols 是表示右表连接列的字符串标量或向量。当 leftTable 和 rightTable 至少有一个连接列不同时，必须指定 rightMatchingCols。返回结果中的连接列与左表的连接列名称相同
select tagId,datetime,value,machineId,tagName,organization from ej(sensors,tagInfo,`id,`tagid) where machineId in [1,2], datetime between 2020.09.01T00:00:00 : 2020.09.01T00:59:59 order by datetime

// ej(leftTable, rightTable, matchingCols)
// 将 t1 和 t2 进行 equal join(ej) 关联查询, 指定连接列为 id
t1 = table(1 2 3 3 as id, 7.8 4.6 5.1 0.1 as value)
t2 = table(5 3 1 as id, 300 500 800 as qty);
t = ej(t1, t2, `id)

// ***** asof join ***** //
// asof join(aj) 关联查询
// aj(leftTable, rightTable, matchingCols, [rightMatchingCols])
// leftTable 和 rightTable 是连接的表, matchingCols 是表示连接列的字符串标量或向量
// rightMatchingCols 是表示右表连接列的字符串标量或向量。当 leftTable 和 rightTable 至少有一个连接列不同时，必须指定 rightMatchingCols。返回结果中的连接列与左表的连接列名称相同
t1 = table(3 53 as id, 1 2 as machineId, 2020.09.01T09:56:06 2020.09.01T09:58:12 as datetime, 50.6 50.7 as anomalyMetrics)
t2_1 = select *, 1 as machineId from sensors where id=4, datetime between 2020.09.01T09:00:00 : 2020.09.01T09:54:00
t2_2 = select *, 2 as machineId from sensors where id=54, datetime between 2020.09.01T09:00:00 : 2020.09.01T09:57:00
t2 = unionAll(t2_1, t2_2)
select * from aj(t1, t2, `machineId`datetime);
// asof join 和 left join 的区别为：假设连接列是时间，对于左表中时间t对应的行，如果右表中没有与之匹配的记录，则取右表中在t之前的最近时间对应的行

// ***** window join ***** //
// window join(wj) 关联查询
// wj(leftTable, rightTable, window, aggs, matchingCols, [rightMatchingCols])
// leftTable 和 rightTable 是连接的表。
// window 是表示与左表记录有关的窗口边界的整型数据对或 DURATION 数据对，其中左右边界都包含在内。
// aggs 表示聚合函数的元代码。聚合函数中的参数必须是数值类型。详情请参考 元编程。支持输入元组。
// matchingCols 是表示连接列的字符串标量或向量。
// rightMatchingCols 是表示右表连接列的字符串标量或向量。当 leftTable 和 rightTable 至少有一个连接列不同时，必须指定 rightMatchingCols。返回结果中的连接列与左表的连接列名称相同。
t1 = table(1 51 as id, 2020.09.01T09:56:06 2020.09.01T09:56:07 as datetime, 50.6 50.7 as anomalyMetrics)
t2 = select * from sensors where id in [1,51], datetime between 2020.09.01T09:00:00 : 2020.09.01T09:59:59
wj(t1, t2, -5000:0, <[avg(value),max(value),min(value)]>, `id`datetime)

// ***** left join ***** //
// left join(lj) 关联查询兼容标准 SQL
